%{
#include <stdio.h>

typedef enum {
	TOKEN_MEM, //LD, ST		
	TOKEN_STACK, //POP PUSH
	TOKEN_CALC, //ADD SUB DVI MUL
	TOKEN_CMP, //CMP
	TOKEN_JMP, //JMP, JE,	JNE ...
	TOKEN_NUMBER, //123
	TOKEN_LABEL, //l1
	TOKEN_COMMA, //,
	TOKEN_COLON, //:
	TOKEN_LEFT_BRACKT,
	TOKEN_RIGHT_BRACKT,
}TokenType;

%}

%option noyywrap

digit [0-9]
number {digit}+
letter [a-zA-Z]
label {letter}({digit}|{letter})*

%%

"ld" {printf("%s\n", yytext); return TOKEN_MEM;}
"st" {printf("%s\n", yytext); return TOKEN_MEM;}
"add" {printf("%s\n", yytext); return TOKEN_MEM;}
"sub" {printf("%s\n", yytext); return TOKEN_MEM;}
"mul" {printf("%s\n", yytext); return TOKEN_MEM;}
"dvi" {printf("%s\n", yytext); return TOKEN_MEM;}
"push" {printf("%s\n", yytext); return TOKEN_MEM;}
"pop" {printf("%s\n", yytext); return TOKEN_MEM;}
"cmp" {printf("%s\n", yytext); return TOKEN_MEM;}
"jmp" {printf("%s\n", yytext); return TOKEN_MEM;}
"je" {printf("%s\n", yytext); return TOKEN_MEM;}
"jne" {printf("%s\n", yytext); return TOKEN_MEM;}
"jg" {printf("%s\n", yytext); return TOKEN_MEM;}
"jl" {printf("%s\n", yytext); return TOKEN_MEM;}
"jge" {printf("%s\n", yytext); return TOKEN_MEM;}
"jle" {printf("%s\n", yytext); return TOKEN_MEM;}
"," {printf("%s\n", yytext); return TOKEN_MEM;}
":" {printf("%s\n", yytext); return TOKEN_MEM;}
"[" {printf("%s\n", yytext); return TOKEN_MEM;}
"]" {printf("%s\n", yytext); return TOKEN_MEM;}
*/
. {printf("%s\n", yytext); return TOKEN_MEM;}
 

%%

int main() 
{
   	//yylex();
	while(!feof(stdin)) {
    	yylex();
	}
    return 0;
}
